{"version":3,"sources":["components/Head.tsx","utils/api.ts","App.tsx","index.tsx"],"names":["Head","props","description","keywords","title","Helmet","htmlAttributes","lang","defer","charSet","name","content","API_URL","process","wrapResponse","response","then","status","success","result","data","error","String","catch","getDependencyGraph","crateId","features","axios","get","length","join","Home","useState","dependencyGraph","setDependencyGraph","setError","useEffect","a","dependencyGraphRes","loadCrate","notification","message","key","duration","close","className","graphData","nodes","crates","links","dependencies","nodeId","linkSource","linkTarget","warmupTicks","backgroundColor","cooldownTicks","enableNodeDrag","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQASe,SAASA,EAAKC,GAAiC,IACpDC,EAAiCD,EAAjCC,YAAaC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MAC/B,OACE,kBAACC,EAAA,EAAD,CAAQC,eAAgB,CAAEC,KAAM,MAAQC,OAAO,GAC7C,0BAAMC,QAAQ,UACd,0BAAMC,KAAK,cAAcC,QAAO,OAAET,QAAF,IAAEA,IAAe,oBACjD,0BAAMQ,KAAK,WAAWC,QAAO,OAAER,QAAF,IAAEA,IAAY,iBAC3C,0BAAMO,KAAK,SAASC,QAAQ,eAC5B,sCAAQP,QAAR,IAAQA,IAAS,c,8BCdjBQ,EAAUC,6BASVC,EAAe,SACnBC,GADmB,OAGnBA,EACGC,MAAK,SAACD,GAAD,OACgB,MAApBA,EAASE,OACL,CACEC,SAAS,EACTC,OAAQJ,EAASK,MAEnB,CACEF,SAAS,EACTG,MAAOC,OAAOP,EAASK,UAG9BG,OAAM,SAACF,GAAD,cAAY,CACjBH,SAAS,EACTG,MAAK,iBACHA,QADG,IACHA,GADG,UACHA,EAAON,gBADJ,aACH,EAAiBK,YADd,QAEH,wFAMKI,EAAqB,SAChCC,GADgC,IAEhCC,EAFgC,uDAEX,GAFW,OAIhCZ,EACEa,IAAMC,IAAN,UACKhB,EADL,kBACsBa,GADtB,OAEIC,EAASG,OAAS,EAAlB,oBAAmCH,EAASI,KAAK,MAAS,O,QCrCnD,SAASC,IAAsB,IAAD,EAIvCC,mBAAiC,MAJM,mBAEzCC,EAFyC,KAGzCC,EAHyC,OAKjBF,mBAAS,IALQ,mBAKpCX,EALoC,KAK7Bc,EAL6B,KAiC3C,OA1BAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACiBb,EAAmB,aADpC,QACVc,EADU,QAEOpB,QACrBgB,EAAmBI,EAAmBnB,QAEtCgB,EAASG,EAAmBjB,OALd,2CAAH,qDASfkB,KACC,IAEHH,qBACE,iBACY,KAAVf,EACImB,IAAanB,MAAM,CACjBoB,QAAS,QACTvC,YAAamB,EACbqB,IAAK,QACLC,SAAU,IAEZH,IAAaI,MAAM,WACzB,CAACvB,IAID,oCACE,kBAACrB,EAAD,MACqB,OAApBiC,GACC,yBAAKY,UAAU,oBACb,kBAAC,IAAD,CACEC,UAAW,CACTC,MAAOd,EAAgBe,OACvBC,MAAOhB,EAAgBiB,cAEzBC,OAAO,OACPC,WAAW,OACXC,WAAW,KACXC,YAAa,IACbC,gBAAgB,UAChBC,cAAe,EACfC,gBAAgB,M,cCjD5BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d648019b.chunk.js","sourcesContent":["import React, { Component, Props, ReactElement } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface HeadProps extends Props<Component> {\n  title?: string;\n  description?: string;\n  keywords?: string;\n}\n\nexport default function Head(props: HeadProps): ReactElement {\n  const { description, keywords, title } = props;\n  return (\n    <Helmet htmlAttributes={{ lang: \"en\" }} defer={false}>\n      <meta charSet=\"UTF-8\" />\n      <meta name=\"description\" content={description ?? \"App description\"} />\n      <meta name=\"keywords\" content={keywords ?? \"App keywords\"} />\n      <meta name=\"author\" content=\"App author\" />\n      <title>{title ?? \"App title\"}</title>\n    </Helmet>\n  );\n}\n","import axios, { AxiosResponse } from \"axios\";\nimport { Crate, DependencyGraph } from \"./types\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\ntype Response<T> =\n  | {\n      result: T;\n      success: true;\n    }\n  | { error: string; success: false };\n\nconst wrapResponse = <T>(\n  response: Promise<AxiosResponse<T>>\n): Promise<Response<T>> =>\n  response\n    .then((response) =>\n      response.status === 200\n        ? {\n            success: true as true,\n            result: response.data,\n          }\n        : {\n            success: false as false,\n            error: String(response.data),\n          }\n    )\n    .catch((error) => ({\n      success: false as false,\n      error:\n        error?.response?.data ??\n        \"Server error - please post an issue at https://github.com/arpanlaha/vault/issues\",\n    }));\n\nexport const getCrate = (crateId: string): Promise<Response<Crate>> =>\n  wrapResponse(axios.get(`${API_URL}/crates/${crateId}`));\n\nexport const getDependencyGraph = (\n  crateId: string,\n  features: string[] = []\n): Promise<Response<DependencyGraph>> =>\n  wrapResponse(\n    axios.get(\n      `${API_URL}/graph/${crateId}${\n        features.length > 0 ? `?features=${features.join(\",\")}` : \"\"\n      }`\n    )\n  );\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Head } from \"./components\";\nimport { notification } from \"antd\";\nimport { getDependencyGraph } from \"./utils/api\";\nimport { DependencyGraph } from \"./utils/types\";\nimport { ForceGraph3D } from \"react-force-graph\";\n\nexport default function Home(): ReactElement {\n  const [\n    dependencyGraph,\n    setDependencyGraph,\n  ] = useState<DependencyGraph | null>(null);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const loadCrate = async (): Promise<void> => {\n      const dependencyGraphRes = await getDependencyGraph(\"actix-web\");\n      if (dependencyGraphRes.success) {\n        setDependencyGraph(dependencyGraphRes.result);\n      } else {\n        setError(dependencyGraphRes.error);\n      }\n    };\n\n    loadCrate();\n  }, []);\n\n  useEffect(\n    () =>\n      error !== \"\"\n        ? notification.error({\n            message: \"Error\",\n            description: error,\n            key: \"error\",\n            duration: 0,\n          })\n        : notification.close(\"error\"),\n    [error]\n  );\n\n  return (\n    <>\n      <Head />\n      {dependencyGraph !== null && (\n        <div className=\"dependency-graph\">\n          <ForceGraph3D\n            graphData={{\n              nodes: dependencyGraph.crates,\n              links: dependencyGraph.dependencies,\n            }}\n            nodeId=\"name\"\n            linkSource=\"from\"\n            linkTarget=\"to\"\n            warmupTicks={100}\n            backgroundColor=\"#000000\"\n            cooldownTicks={0}\n            enableNodeDrag={false}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"antd/dist/antd.dark.css\";\nimport \"./styles/vault.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}